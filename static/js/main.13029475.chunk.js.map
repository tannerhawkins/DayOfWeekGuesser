{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["StyledHeader","styled","h1","AppContainer","div","Response","h3","StyledDate","DayContainer","StyledDay","AwesomeButton","Footer","Right","Wrong","App","defaultMin","Date","defaultMax","useState","minDate","maxDate","date","setDate","lastAnswer","setLastAnswer","correctDay","setCorrectDay","right","setRight","wrong","setWrong","generateNewDate","start","end","getTime","Math","random","useEffect","handleClick","guess","getDay","day","className","Intl","DateTimeFormat","month","format","getDate","getFullYear","type","onPress","style","color","undefined","percent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13029475.chunk.js","sourcesContent":["import \"./App.css\";\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nimport { AwesomeButton } from \"react-awesome-button\";\nimport { ProgressBar, Step } from \"react-step-progress-bar\";\nimport \"react-awesome-button/dist/themes/theme-blue.css\";\n\nfunction randomDate(start, end) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  );\n}\n\nconst getDay = (day) => {\n  switch (day) {\n    case 0:\n      return \"Sunday\"\n    case 1:\n      return \"Monday\"\n    case 2:\n      return \"Tuesday\"\n    case 3:\n      return \"Wednesday\"\n    case 4:\n      return \"Thursday\"\n    case 5:\n      return \"Friday\"\n    case 6:\n      return \"Saturday\"\n    default:\n      return \"invalid\"\n  }\n}\n\nfunction App() {\n  const defaultMin = new Date(1500, 0, 1);\n  const defaultMax = new Date();\n  const [minDate, setMinDate] = useState(defaultMin);\n  const [maxDate, setMaxDate] = useState(defaultMax);\n  const [date, setDate] = useState(defaultMax);\n  const [lastAnswer, setLastAnswer] = useState();\n  const [correctDay, setCorrectDay] = useState();\n  const [right, setRight] = useState(0);\n  const [wrong, setWrong] = useState(0);\n\n  const generateNewDate = () => {\n    setDate(randomDate(minDate, maxDate));\n  };\n\n  useEffect(generateNewDate, []);\n\n  const handleClick = (guess) => {\n    if(date.getDay() === guess) {\n      setLastAnswer(true);\n      setRight(right+1);\n    } else {\n      setLastAnswer(false);\n      setWrong(wrong+1)\n    }\n    setCorrectDay(getDay(date.getDay()))\n    generateNewDate();\n  }\n\n  return (\n    <AppContainer className=\"App\">\n      <StyledHeader>Day of Week Guessing Game</StyledHeader>\n      <StyledDate>{`${new Intl.DateTimeFormat(\"en-US\", {\n        month: \"long\",\n      }).format(date)} ${date.getDate()} ${date.getFullYear()}`}</StyledDate>\n      <DayContainer>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(0)}>Sunday</StyledDay>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(1)}>Monday</StyledDay>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(2)}>Tuesday</StyledDay>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(3)}>Wednesday</StyledDay>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(4)}>Thursday</StyledDay>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(5)}>Friday</StyledDay>\n        <StyledDay type=\"secondary\" onPress={() => handleClick(6)}>Saturday</StyledDay>\n      </DayContainer>\n      <Footer>\n      <Right>Correct: {right}</Right>\n      <Response style={{color: lastAnswer ? \"#17fc03\" : \"red\"}}>\n        {(lastAnswer === undefined) ? \"\" : lastAnswer ? `Correct! It was a ${correctDay}.` : `Incorrect. It was a ${correctDay}.`}\n      </Response>\n      <Wrong>Incorrect: {wrong}</Wrong>\n      </Footer>\n      <ProgressBar percent={50}/>\n    </AppContainer>\n  );\n}\n\nconst StyledHeader = styled.h1`\n  width: 50%;\n  text-align: center;\n`;\n\nconst AppContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Response = styled.h3`\n`\n\nconst StyledDate = styled.h1``;\n\nconst DayContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 40px;\n`;\n\nconst StyledDay = styled(AwesomeButton)`\n  width: 100px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 0 10px;\n`;\n\nconst Footer = styled.div`\n  display: flex;\n  width: 40%;\n  align-items: center;\n  justify-content: space-between;\n`\n\nconst Right = styled.h3`\n  color: \"green\";\n`\n\nconst Wrong = styled.h3`\n  color: \"red\";\n`\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}